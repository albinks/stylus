name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'albinks'

    permissions:
      contents: write
      id-token: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.12-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --with dev

      - name: Run tests
        run: |
          poetry run pytest tests/ -v --cov=stylus --cov-report=term-missing

      - name: Check for conventional commits
        id: check-commits
        run: |
          echo "Checking for conventional commits..."
          COMMITS=$(git log --oneline --no-merges $(git describe --tags --abbrev=0 2>/dev/null || echo "")..HEAD 2>/dev/null || git log --oneline --no-merges -10)
          echo "Recent commits:"
          echo "$COMMITS"

          # Check if there are any feat or fix commits
          if echo "$COMMITS" | grep -qE "^[a-f0-9]+ (feat|fix|perf|refactor|docs|style|test|build|ci|chore|revert)(\(.+\))?:"; then
            echo "has_conventional_commits=true" >> $GITHUB_OUTPUT
            echo "Found conventional commits"
          else
            echo "has_conventional_commits=false" >> $GITHUB_OUTPUT
            echo "No conventional commits found"
          fi

      - name: Debug - Check current version
        run: |
          echo "Current version in pyproject.toml:"
          grep "^version = " pyproject.toml || echo "Version not found"
          echo "Git tags:"
          git tag -l || echo "No tags found"

      - name: Python Semantic Release
        id: release
        uses: python-semantic-release/python-semantic-release@v9.8.3
        with:
          github_token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
          git_committer_name: "github-actions[bot]"
          git_committer_email: "github-actions[bot]@users.noreply.github.com"

      - name: Debug - Release outputs
        if: always()
        run: |
          echo "Released: ${{ steps.release.outputs.released }}"
          echo "Version: ${{ steps.release.outputs.version }}"
          echo "Tag: ${{ steps.release.outputs.tag }}"
          echo "Release notes: ${{ steps.release.outputs.changelog }}"

      - name: Build package
        if: steps.release.outputs.released == 'true'
        run: |
          echo "Building package for release..."
          poetry build

      - name: Check PyPI token availability
        id: check-pypi
        run: |
          if [ -n "${{ secrets.PYPI_API_TOKEN }}" ]; then
            echo "pypi_available=true" >> $GITHUB_OUTPUT
            echo "PyPI token is configured"
          else
            echo "pypi_available=false" >> $GITHUB_OUTPUT
            echo "::warning::PyPI token not configured - skipping PyPI publish"
          fi

      - name: Publish to Test PyPI (optional)
        if: steps.release.outputs.released == 'true' && steps.check-pypi.outputs.pypi_available == 'true'
        continue-on-error: true
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          skip-existing: true
          verbose: true

      - name: Publish to PyPI
        if: steps.release.outputs.released == 'true' && steps.check-pypi.outputs.pypi_available == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
          verbose: true

      - name: Publish to GitHub Releases
        if: steps.release.outputs.released == 'true'
        uses: python-semantic-release/upload-to-gh-release@main
        with:
          github_token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}

      - name: Summary
        if: always()
        run: |
          echo "## Release Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.release.outputs.released }}" == "true" ]; then
            echo "✅ **Release created successfully**" >> $GITHUB_STEP_SUMMARY
            echo "- Version: ${{ steps.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "- Tag: ${{ steps.release.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **No release created**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Possible reasons:" >> $GITHUB_STEP_SUMMARY
            echo "- No conventional commits since last release" >> $GITHUB_STEP_SUMMARY
            echo "- No version bump required" >> $GITHUB_STEP_SUMMARY
            echo "- Semantic release configuration issue" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Token Status" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.check-pypi.outputs.pypi_available }}" == "true" ]; then
            echo "- ✅ PyPI token configured" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ PyPI token not configured (publishing skipped)" >> $GITHUB_STEP_SUMMARY
          fi
